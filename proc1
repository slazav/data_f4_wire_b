#!/usr/bin/python3

import numpy
import math
import scipy.optimize
import matplotlib.pyplot as plt
import os
import glob
import re

import sys
sys.path.insert(1, '.')
sys.path.insert(1, '../../scripts/py')
import graphene002 as graphene
import fit_res003 as fit_res
import f4track002 as f4track

###########################################################
# Download data and do initial fitting.
# Usage: proc1 <name>.tab
#
# Tab file structure:
# 2 or 3 columns: time1, time2, max_drive
# vmin<value>: set min velocity for following records
#
# Output:
#   <name>/<time>.{npz,png,dat} -- downloaded data, plot, output.
#   <name>.res -- fit result
#
# *.dat file structure:
#   vel[cm/s]  width[Hz], freq[Hz], drive[A], fit
#
# Fit is done with delta = delta0*[S(v/v0) + Si] function.
# More general models with intrinsic widths and relations between v0 and delta0
# should be done later.
#
###########################################################

# Fit of theoretical S function
A0=0.486387040089067
B0=1.14243469051564

def proc1(fdir, name, t1,t2, dmax=0, vmin=0, plot_uncorr=False, fo=sys.stdout, use_dfi=1, **kwargs):
  print(name, t1,t2, dmax)
  os.makedirs(fdir + name, exist_ok=1)
  t1=graphene.timeconv(t1)
  pref = fdir + "%s/%i"%(name, float(t1))

  def fitfunc(v,df0,v0, Si=0):
    return df0/(1 + A0*abs(v/v0)**B0) + df0*abs(Si)

  (fig,ax)=plt.subplots(2,2)

  data=f4track.get_track(name, t1,t2, dfunc='fit', cache=pref, **kwargs, fit_npars=8)

  ##############
  # fit dF(vel)
  s = data.DD[0]<data.DD[-1] # sweep direction

  # Crop velocity range
  ii = data.vel>vmin

  # Crop drive
  if dmax>0: ii[data.DD>dmax] = 0

  # Select data for fitting, below minimum of dF
  # Should be done after cropping vmin!
  imin=numpy.argmin(data.dF[ii])
  imin=numpy.where(ii)[0][imin]
  if s: ii[imin:] = 0
  else: ii[0:imin+1] = 0

  if data.vel[ii].size<5:
    print ("  skip short dataset: ", name, t1, data.vel[ii].size)
    return -1

  # fit without dFi
  par=[data.dF[ii][0], 0.2]
  err=[0,0]
  res = scipy.optimize.curve_fit(fitfunc, data.vel[ii], data.dF[ii], par, maxfev=100000)
  par = res[0].tolist()

  if use_dfi:
    par.append(+0.05)
    err.append(0)
    # main fit
    res = scipy.optimize.curve_fit(fitfunc, data.vel[ii], data.dF[ii], par, maxfev=100000)
    par = res[0].tolist()
    err = numpy.sqrt(numpy.diag(res[1])).tolist()
  else:
    par.append(0)
    err.append(0)
  par[1] = abs(par[1])

  def dfunc(d0, vel): return fitfunc(vel*data.volt2vel, d0, par[1], par[2])

  numpy.savetxt(pref+'.dat',
    numpy.column_stack((data.vel, data.dF, data.F0, data.DD, ii)),
    fmt="%10.6f %10.6f %11.6f %.6e %1d", header="vel[cm/s]  width[Hz], freq[Hz], drive[A], fit")

  print("%s %s  %7.3f %.6f  %7.3f %.6f %.6f  %.6f %5.2f"%(\
    name, t1, data.fit.df, data.fit.v0*data.volt2vel,\
    par[0], par[1], par[2], data.field, data.press), file=fo)

  ##############
  # plot data
  fit_res.plot(ax[0,0], ax[0,0], data.sweep, data.fit, npts=200, xlabel="X", ylabel="Y")

  ax[0,0].set_ylabel("volt, Vrms")
  ax[0,0].legend()

  ax[0,1].plot(data.vel, data.dF, 'b.')
  ax[0,1].plot(data.vel[ii], data.dF[ii], 'r.')
  xx=numpy.linspace(0, max(data.vel), 100)
  ax[0,1].plot(xx, fitfunc(xx, *par), 'k-')

  # sweep trace 
  maxvel=data.fit.amp * data.sweep[0,4] * data.volt2vel
  ax[0,1].plot(xx, fitfunc(xx, data.fit.df, data.fit.v0*data.volt2vel), 'g--', linewidth=0.5)
  xx=numpy.linspace(0, maxvel, 100)
  ax[0,1].plot(xx, fitfunc(xx, data.fit.df, data.fit.v0*data.volt2vel), 'g-')

  ax[0,1].set_xlim((0,None))
  ax[0,1].set_ylim((0,fitfunc(0, *par)))
  ax[0,1].set_xlabel("velocity, cm/s")
  ax[0,1].set_ylabel("dF, Hz")

  ax[1,0].plot(data.TT-data.TT[0], data.vel, 'b.-')
  ax[1,0].plot(data.TT[ii]-data.TT[0], data.vel[ii], 'r.-')
  ax[1,0].set_xlabel("time, s")
  ax[1,0].set_ylabel("velocity, cm/s")

  ax[1,1].plot(data.DD, data.vel, 'b.-')
  ax[1,1].plot(data.DD[ii], data.vel[ii], 'r.-')
  ax[1,1].set_xlabel("drive, A")
  ax[1,1].set_ylabel("velocity, cm/s")

  plt.gcf().set_size_inches(8, 8)
  plt.savefig(pref+'.png', dpi=100)
  plt.close()
  return 0

######################################################################
if len(sys.argv)!=2:
  raise Exception("Usage: proc1 <tab file> > <res file>")

tab=sys.argv[1]
name=re.match('(.*/)?([^/]+)\.tab$', tab)

if not name:
  raise Exception("can't parse file name: ", tab)

name = name.groups()
if len(name) == 1:
  fdir = "./"
  name = name[0]
elif len(name) == 2:
  fdir = name[0]
  name = name[1]
else: raise Exception("can't parse file name: ", tab)

fi = open(tab)
fo = open(fdir + "%s.res"%(name), 'w')
print("# name, time, sw_delta0[Hz], sw_v0[cm/s], delta0[Hz], v0[cm/s], Si, B[T], P[bar] ", file=fo)

vmin=0.1
while line := fi.readline():
  line = line.split('#')[0]
  line = line.split()
  if len(line)<2: continue

  if line[0]=="vmin":
    vmin=float(line[1])
    continue

  (t1,t2) = line[:2]
  if len(line)>2: dmax=float(line[2])
  else: dmax=0
  proc1(fdir, name, t1, t2, dmax=dmax, vmin=vmin, fo=fo)

