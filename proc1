#!/usr/bin/python3

import numpy
import math
import scipy.optimize
import matplotlib.pyplot as plt
import os
import glob
import re

import sys
sys.path.insert(1, '../../scripts/py')
import graphene002 as graphene
import f4wire_my as f4wire
import fit_res003 as fit_res

# Theoretical expansion
#A0 = 4/(3*numpy.pi)
#B0 = A0**2 - 1/8.0
#C0 = ...

# Fit of S function
A0=0.439023879201735
B0=0.045824276758537
C0=-0.00192214696297599

def proc1(fdir, name, t1,t2, dmax=0, plot_uncorr=False, fo=sys.stdout, use_dfi=1, **kwargs):
  print(name, t1,t2, dmax)
  os.makedirs(fdir + name, exist_ok=1)
  t1=graphene.timeconv(t1)
  pref = fdir + "%s/%i"%(name, float(t1))

  def fitfunc(v,df0,v0, Si=0):
    return df0/(1 + A0*(v/v0) + B0*(v/v0)**2 + C0*(v/v0)**3) + df0*Si

  # start with wire parameters without non-linearity:
  wire = f4wire.wire_info_t(name)

  (fig,ax)=plt.subplots(2,2)

  # Minimum voltage is determined by lock-in noise.
  # We have: 8nV for w1a, w2a, w1b
  #          24nV for w1bt, w2bt
  if   name == 'w1a': vmin = 20e-9
  elif name == "w2a": vmin = 60e-9
  elif name == "w1b": vmin = 60e-9
  elif name == "w1bt": vmin = 60e-9
  elif name == "w2bt": vmin = 30e-9
  else: vmin = 8e-9

  sfunc=None
  for i in range(4):
    data=f4wire.get_track(name, t1,t2, sfunc=sfunc, cache=pref, **kwargs, fit_npars=8)
    if plot_uncorr: ax[1].plot(data.vel, data.dF, 'b-')
    ##############
    # fit dF(vel)

    s = data.DD[0]<data.DD[-1] # sweep direction

    # Crop velocity range
    ii = data.vel>vmin*data.volt2vel

    # Crop drive
    if dmax>0: ii[data.DD>dmax] = 0

    # Select data for fitting, below minimum of dF
    # Should be done after cropping vmin!
    imin=numpy.argmin(data.dF[ii])
    imin=numpy.where(ii)[0][imin]
    if s: ii[imin:] = 0
    else: ii[0:imin+1] = 0

    if data.vel[ii].size<5:
      print ("  skip short dataset: ", name, t1, data.vel[ii].size)
      return -1

    # fit without dFi
    par=[data.dF[ii][0], 0.2]
    err=[0,0]
    res = scipy.optimize.curve_fit(fitfunc, data.vel[ii], data.dF[ii], par, maxfev=10000)
    par = res[0].tolist()

    if use_dfi:
      par.append(+0.05)
      err.append(0)
      # main fit
      res = scipy.optimize.curve_fit(fitfunc, data.vel[ii], data.dF[ii], par, maxfev=10000)
      par = res[0].tolist()
      err = numpy.sqrt(numpy.diag(res[1])).tolist()
    else:
      par.append(0)
      err.append(0)

    def sfunc(v): return fitfunc(v*data.volt2vel, *par)/par[0]

  numpy.savetxt(pref+'.dat',
    numpy.column_stack((data.vel, data.dF, data.F0, data.DD, ii)),
    fmt="%10.6f %10.6f %11.6f %.6e %1d", header="vel[cm/s]  width[Hz], freq[Hz], drive[A], fit")

  print("%s %s %7.3f %.6f %.6f  %.6f %5.2f"%(name, t1, par[0], par[1], par[2], data.field, data.press), file=fo)

  ##############
  # plot data
  fit_res.plot(ax[0,0], ax[0,0], data.sweep, data.fit, npts=200, xlabel="X", ylabel="Y")

  ax[0,0].set_ylabel("volt, Vrms")
  ax[0,0].legend()

  ax[0,1].plot(data.vel, data.dF, 'b.')
  ax[0,1].plot(data.vel[ii], data.dF[ii], 'r.')
  xx=numpy.linspace(0, max(data.vel), 100)
  ax[0,1].plot(xx, fitfunc(xx, *par), 'k-')
  ax[0,1].set_xlim((0,None))
  ax[0,1].set_ylim((0,fitfunc(0, *par)))
  ax[0,1].set_xlabel("velocity, cm/s")
  ax[0,1].set_ylabel("dF, Hz")

  ax[1,0].plot(data.TT-data.TT[0], data.vel, 'b.-')
  ax[1,0].plot(data.TT[ii]-data.TT[0], data.vel[ii], 'r.-')
  ax[1,0].set_xlabel("time, s")
  ax[1,0].set_ylabel("velocity, cm/s")

  ax[1,1].plot(data.DD, data.vel, 'b.-')
  ax[1,1].plot(data.DD[ii], data.vel[ii], 'r.-')
  ax[1,1].set_xlabel("drive, A")
  ax[1,1].set_ylabel("velocity, cm/s")

  plt.gcf().set_size_inches(8, 8)
  plt.savefig(pref+'.png', dpi=100)
  plt.close()
  return 0

######################################################################
if len(sys.argv)!=2:
  raise Exception("Usage: proc1 <tab file> > <res file>")

tab=sys.argv[1]
name=re.match('(.*/)?([^/]+)\.tab$', tab)

if not name:
  raise Exception("can't parse file name: ", tab)

name = name.groups()
if len(name) == 1:
  fdir = "./"
  name = name[0]
elif len(name) == 2:
  fdir = name[0]
  name = name[1]
else: raise Exception("can't parse file name: ", tab)

fi = open(tab)
fo = open(fdir + "%s.res"%(name), 'w')
print("# name, time, delta0[Hz], v0[cm/s], Si, B[T], P[bar] ", file=fo)

(fig, ax) = plt.subplots(1,1)
while line := fi.readline():
  line = line.split('#')[0]
  line = line.split()
  if len(line)<2: continue

  (t1,t2) = line[:2]
  if len(line)>2: dmax=float(line[2])
  else: dmax=0
  if proc1(fdir, name, t1, t2, dmax=dmax, fo=fo)==-1:
    continue

  # plot data
  dat = fdir + "%s/%i.dat"%(name, float(t1))
  (vel, dF, F0, DD, S) = numpy.loadtxt(dat, unpack=1)
  vmin=min(vel[S>0])
  ax.semilogy(vel[vel>vmin/3], dF[vel>vmin/3], 'b.-')
  ax.semilogy(vel[S>0], dF[S>0], 'r.-')

ax.set_xlim((0,None))
ax.set_xlabel('velocity, cm/s')
ax.set_ylabel('damping, Hz')
ax.set_title(fdir + name)
fig.set_size_inches(8, 12)
fig.savefig(fdir + name + '.png', dpi=100)
