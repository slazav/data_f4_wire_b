#!/usr/bin/python3

import numpy
import math
import fileinput
import scipy.optimize
import matplotlib.pyplot as plt
import os
import sys
import glob
import re

# Fit of theoretical S function
A0=0.486387040089067
B0=1.14243469051564

######################################################################
# Make a single model for one field
# Read *.res file, write *.res3 file
#
######################################################################
# function for proc1 fits
def funcS0(v,df0,v0,si):
  return df0/(1 + A0*abs(v/v0)**B0) + df0*si

# function for proc2 fits
def func_df(v, field, df0,v0, dfi, dff, p0):
  return df0/(1 + A0*abs(v/v0)**p0) + dfi + dff*field**2

def minfunc(par, data):
  A = par[0]
  B = par[1]
  dfi = par[2]
  dff = par[3]
  p0  = par[4]
  df0 = par[5:]
  ss=0
  for i in range(len(data)):
    (vel, df, S, field) = data[i]
    ii=S>0
    v0 = B/(A - numpy.log(abs(df0[i])))
    df1 = abs(func_df(vel[ii], field, df0[i], v0, dfi, dff, p0))
    ss += numpy.linalg.norm(numpy.log(df1) - numpy.log(df[ii]))
  return ss

######################################################################
if len(sys.argv)<2:
  raise Exception("Usage: plot_model <res file> ...")

data=[]
par=[16, 0.3, 0.16, 26, B0]
par=[16.005805371316118, 0.30518956316729046, 0.16183975459414213, 26.812092136861004, 0.836115836789375]  # 2bar
par=[17.40579784002655, 0.31332708535561227, 0.4865821777391899, 13.840070468738114, 0.8724528622108128] # w1a, 0bar


for tab in sys.argv[1:]:
  name=re.match('(.*/)?([^/]+)\.res$', tab)

  if not name:
    raise Exception("can't parse file name: ", tab)

  name = name.groups()
  if len(name) == 1:
    fdir = "./"
    name = name[0]
  elif len(name) == 2:
    fdir = name[0]
    name = name[1]
  else: raise Exception("can't parse file name: ", tab)

  #### load res file
  (tt, df0_sw, v0_sw, df0_1, v0_1, si_1, field, press) = numpy.loadtxt(
    tab, usecols=(1,2,3,4,5,6,7,8), unpack=1)
  print("load ", tab)


  #### load data files
  vmin=0
  vmax=float('+inf')
  for i in range(tt.size):
    fname2 = "%s/%s/%.0f.dat"%(fdir,name, tt[i])
    (vel, dF, F0, DD, S) = numpy.loadtxt(fname2, unpack=1)
    data.append((vel, dF, S, field[i]))
    par.append(max(dF[S>0]))

    # collect vmin/vmax information, but only if it's not end points:
    vmin1=min(vel[S>0])
    vmax1=max(vel[S>0])
    if vmin1!=min(vel) and vmin < vmin1: vmin = vmin1
    if vmax1!=max(vel) and vmax > vmax1: vmax = vmax1

err=numpy.zeros_like(par)

#### fit data
res = scipy.optimize.minimize(minfunc, par, (data),
   options={'disp': False, 'maxiter': 10000})
par = res.x.tolist()
# Parameter uncertainty which corresponds to res.fun
# which is relative RMS difference between function and the model.
# df = d2f/dx2 dx2 -> dx = dqrt(0.5*df*H^-1)
err = numpy.sqrt(0.5*res.fun*numpy.diag(res.hess_inv)).tolist()

print(par[:5])

fo = open(name + '.res3', "w")
print("# name press field   A B dfi dfl p0  err(A, B, dfi, dfl, p0)  vmin vmax", file=fo)
print("%-4s  %.2f %.4f  %f %f %f %f %f  %f %f %f %f %f  %f %f"\
  %(name, numpy.mean(press), numpy.mean(field), *par[:5], *err[:5], vmin, vmax),
  file=fo)
fo.close()

#### plot data
(fig, ax) = plt.subplots(1,1)
# same as in minfunc()
A = par[0]
B = par[1]
dfi = par[2]
dff = par[3]
p0  = par[4]
df0 = par[5:]

def func_df1(v, field, df0):
  v0 = B/(A - numpy.log(abs(df0)))
  return func_df(v, field, df0, v0, dfi, dff, p0)

# plot vmin/vmax
#ax.semilogy([vmin,vmin], [func_df1(vmin, min(df0)), func_df1(vmin, max(df0))], 'c-')
#ax.semilogy([vmax,vmax], [func_df1(vmax, min(df0)), func_df1(vmax, max(df0))], 'c-')


cols = {46: 'C0', 69: 'C1', 91: 'C2', 113: 'C3', 136: 'C4', 135: 'C4', 158: 'C5', 203: 'C6'}

for i in range(len(data)):
  (vel, df, S, field) = data[i]
#  v0 = B/(A - numpy.log(abs(df0[i])))

  vmin=min(vel[S>0])
  vmax=max(vel[S>0])

  ifld=round(field*1e3)
  if ifld in cols: c = cols[ifld]
  else:
    print('unknown field: ', ifld)
    c='k'

#  ax.semilogy(vel[vel>vmin/3], df[vel>vmin/3], c+'.')
  ax.semilogy(vel[S>0], df[S>0], c+'.')
  xx=numpy.linspace(0, vmax, 100)
#  yy1 = funcS0(xx,  df0_1[i], v0_1[i], si_1[i])
  yy2 = func_df1(xx, field, df0[i])
#  ax.semilogy(xx, yy1, 'k-', linewidth=0.5)
  ax.semilogy(xx, yy2, c+'-', linewidth=0.5)


ax.grid(which='both')
ax.set_xlim((0,None))
ax.set_xlabel('velocity, cm/s')
ax.set_ylabel('damping, Hz')
ax.set_title(fdir + name)
fig.set_size_inches(8, 12)
fig.savefig(name + '.png', dpi=100)
