#!/usr/bin/python3

import numpy
import math
import scipy.optimize
import matplotlib.pyplot as plt
import os
import sys
import glob
import re

# Fit of theoretical S function
A0=0.486387040089067
B0=1.14243469051564

######################################################################
# Collect all plots for each field
# Read *.res file, write *.png
#
######################################################################
# function for proc1 fits
def funcS0(v,df0,v0,si):
  return df0/(1 + A0*abs(v/v0)**B0) + df0*si

######################################################################
if len(sys.argv)!=2:
  raise Exception("Usage: plot_model <res file>")

tab=sys.argv[1]
name=re.match('(.*/)?([^/]+)\.res$', tab)

if not name:
  raise Exception("can't parse file name: ", tab)

name = name.groups()
if len(name) == 1:
  fdir = "./"
  name = name[0]
elif len(name) == 2:
  fdir = name[0]
  name = name[1]
else: raise Exception("can't parse file name: ", tab)

#### load res file
(tt, df0_sw, v0_sw, df0_1, v0_1, si_1, field, press) = numpy.loadtxt(
  tab, usecols=(1,2,3,4,5,6,7,8), unpack=1)

#### load data files
data=[]
par=[20, 0.3, 0.1, B0]
vmin=0
vmax=float('+inf')
for i in range(tt.size):
  fname2 = "%s/%s/%.0f.dat"%(fdir,name, tt[i])
  (vel, dF, F0, DD, S) = numpy.loadtxt(fname2, unpack=1)
  data.append((vel, dF, S, field[i]))
  par.append(max(dF[S>0]))

  # collect vmin/vmax information, but only if it's not end points:
  vmin1=min(vel[S>0])
  vmax1=max(vel[S>0])
  if vmin1!=min(vel) and vmin < vmin1: vmin = vmin1
  if vmax1!=max(vel) and vmax > vmax1: vmax = vmax1
err=numpy.zeros_like(par)


#### plot data
(fig, ax) = plt.subplots(1,1)
# same as in minfunc()
A = par[0]
B = par[1]
dfi = par[2]
p0  = par[3]
df0 = par[4:]

for i in range(len(data)):
  (vel, df, S, field) = data[i]

  vmin=min(vel[S>0])
  vmax=max(vel[S>0])

  ax.semilogy(vel[vel>vmin/3], df[vel>vmin/3], 'b.-')
  ax.semilogy(vel[S>0], df[S>0], 'r.-')
  xx=numpy.linspace(0, vmax, 100)
  yy1 = funcS0(xx,  df0_1[i], v0_1[i], si_1[i])
  ax.semilogy(xx, yy1, 'k-', linewidth=0.5)

ax.grid(which='both')
ax.set_xlim((0,None))
ax.set_xlabel('velocity, cm/s')
ax.set_ylabel('damping, Hz')
ax.set_title(fdir + name)
fig.set_size_inches(8, 12)
fig.savefig(fdir + name + '.png', dpi=100)
